<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Compose</title>
    <link>https://samskivert.github.io/compose/</link>
    <description>Recent content in Home on Compose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://samskivert.github.io/compose/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manifesto</title>
      <link>https://samskivert.github.io/compose/posts/manifesto/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://samskivert.github.io/compose/posts/manifesto/</guid>
      <description>When possible, I like to start my projects with a good manifesto. Decry the moral bankruptcy of my peers, chart out a course to utopia, that sort of thing. Here are the things that Compose aims to do that I feel buck the status quo to varying degrees.
No files, no ASCII This has two major components:
 Compose programs will not be stored as a sequence of UTF-8 characters that are parsed into an AST.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://samskivert.github.io/compose/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://samskivert.github.io/compose/faq/</guid>
      <description>Wherein questions which have in fact not been asked with any degree of frequency are misclassified as frequently asked, and then answered.
If you haven&amp;rsquo;t already, read the goals of the language, as that has the most detailed information. If you still have questions, then check here, or email me and I&amp;rsquo;ll add an answer to this FAQ.
Does it orient objects? Compose is not an object oriented language. There are certain things about OO that are nice, and Compose will seek to include them (first argument dot function name style calls, for example, because they&amp;rsquo;re so tab completable).</description>
    </item>
    
    <item>
      <title>Goals</title>
      <link>https://samskivert.github.io/compose/goals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://samskivert.github.io/compose/goals/</guid>
      <description>It must be borne in mind that the tragedy of life doesn’t lie in not reaching your goal. The tragedy lies in having no goals to reach.” — Benjamin E. Mays
 I have many goals for Compose, some radical, some mundane. Enumerating them here serves to convey my aims until that job can be done by a working prototype. Communicating the goals also helps me to clarify them to myself.</description>
    </item>
    
    <item>
      <title>Primer</title>
      <link>https://samskivert.github.io/compose/primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://samskivert.github.io/compose/primer/</guid>
      <description>Literals  Int8: -128 &amp;hellip; 127 Int16: -32768 &amp;hellip; 32767 Int32: -2147483648 &amp;hellip; 2147483647 Int64: -2^63 &amp;hellip; 2^63-1 Nat8: 0 &amp;hellip; 255 Nat16: 0 &amp;hellip; 65535 Nat32: 0 &amp;hellip; 4294967295 Nat64: 0 &amp;hellip; 2^64-1 Float32: -3.4028235E38 &amp;hellip; 3.4028235E38 Float64: -1.7976931348623157E308 &amp;hellip; 1.7976931348623157E308 Boolean: false, true  Infix Operators Arithmetic  unary: + - binary: + - * / %  Bitwise  unary: ~ binary: &amp;amp; ^ | &amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;  Relational  binary: &amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !</description>
    </item>
    
    <item>
      <title>Project Model</title>
      <link>https://samskivert.github.io/compose/project-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://samskivert.github.io/compose/project-model/</guid>
      <description>Main concepts:
 A workspace contains projects. A project contains components. A component is either an app or a lib and contains modules. A module contains defs.  Projects in a workspace are either explicit (i.e. you added the project to the workspace and you are working on it) or implicit (the project is a dependency of an explicit project or another implicit project).
If an explicit project depends on another explicit project, the (bleeding edge) version in the workspace will be used instead of the expressed version.</description>
    </item>
    
  </channel>
</rss>