package compose

import org.junit.Test
import org.junit.Assert._

class ParsersTest {
  import Constants._
  import Names._
  import Parsers._
  import Symbols._
  import Trees._

  def intLit (value :Int) = LitTree(int(value.toString))
  def ref (name :String) = URefTree(termName(name))
  def app (funTree :TermTree, argTree :TermTree) = AppTree(funTree, argTree)

  // a special symbol that compares as equal when names are equal, so we can test tree parsing;
  // note: this relies on the test sym being compared to the lexical sym generated by the parser
  // (and not vice versa), beware fragility!
  class TestSym (_name :String, sort :Sort) extends LexicalSym(termName(_name), sort) {
    override def equals (other :Any) = other match {
      case os :LexicalSym => os.name == name && os.sort == sort
    }
  }
  def termSym (name :String) = new TestSym(name, Sort.Term)
  def typeSym (name :String) = new TestSym(name, Sort.Type)

  @Test def testParseLits = {
    val p = parser
    assertEquals(intLit(25), p.parseExpr("25"))
    assertEquals(LitTree(False), p.parseExpr("false"))
    assertEquals(LitTree(True), p.parseExpr("true"))
    assertEquals(LitTree(string("bob")), p.parseExpr("\"bob\""))
    assertEquals(LitTree(float("1e7")), p.parseExpr("1e7"))
    assertEquals(LitTree(float("1.1232")), p.parseExpr("1.1232"))
    assertEquals(LitTree(float("1.4e3")), p.parseExpr("1.4e3"))
  }

  @Test def testParsePreOps = {
    val p = parser
    assertEquals(app(ref("-"), intLit(3)), p.parseExpr("-3"))
    assertEquals(app(ref("!"), LitTree(False)), p.parseExpr("!false"))
    assertEquals(app(ref("!"), app(ref("-"), ref("bar"))), p.parseExpr("!-bar"))
    assertEquals(app(ref("!"), app(ref("+"), ref("foo"))), p.parseExpr("!+foo"))
  }

  @Test def testParseBinOps = {
    val p = parser
    assertEquals(app(app(ref("+"), intLit(3)), intLit(5)), p.parseExpr("3+5"))
    assertEquals(app(app(ref("*"), intLit(3)), intLit(5)), p.parseExpr("3*5"))
    assertEquals(app(app(ref("-"), intLit(3)), ref("foo")), p.parseExpr("3-foo"))
    assertEquals(app(app(ref("/"), ref("foo")), intLit(5)), p.parseExpr("foo/5"))
  }

  @Test def testParseLets = {
    val p = parser
    assertEquals(LetTree(Bind(termSym("foo"), THoleTree, intLit(5)), intLit(3)),
                 p.parseExpr("let foo = 5 in 3"))

    val xPlus3 = AbsTree(termSym("x"), THoleTree, app(app(ref("+"), ref("x")), intLit(3)))
    assertEquals(LetTree(Bind(termSym("foo"), THoleTree, xPlus3),
                         app(ref("foo"),intLit(5))),
                 p.parseExpr("let foo x = x + 3 in foo 5"))
  }
}
