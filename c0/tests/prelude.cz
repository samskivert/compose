// Defines built-in and foundational types, funs and interfaces.

fun not (a :Bool) :Bool = foreign("return !a")

fun id[A] (a :A) :A = a

fun length[A] (as :Array[A]) :I32 = foreign("return as.length")

interface Semiring[A] {
  fun zero () :A
  fun add (a1 :A, a2 :A) :A
  fun one () :A
  fun mul (a1 :A, a2 :A) :A
}

interface Ring[A] : Semiring[A] {
  fun sub (a1 :A, a2 :A) :A
}

fun negate[A:Ring] (a :A) :A = zero() - a

fun i32Zero () :I32 = 0
fun i32Add (a :I32, b :I32) :I32 = foreign("return a + b")
fun i32One () :I32 = 1
fun i32Mul (a :I32, b :I32) :I32 = foreign("return a * b")
impl i32SemiRing = Semiring[I32](zero=i32Zero, add=i32Add, one=i32One, mul=i32Mul)
